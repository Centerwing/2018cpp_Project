// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MYGAME_MYGAME_H_
#define FLATBUFFERS_GENERATED_MYGAME_MYGAME_H_

#include "flatbuffers/flatbuffers.h"

namespace MyGame {

struct Join;

struct Welcome;

struct ChangeTeam;

struct ChangeStatus;

struct Chat;

struct Move;

struct Attack;

struct CreBuilding;

struct CreUnit;

struct Msg;

enum MsgType {
  MsgType_None = 0,
  MsgType_Join = 1,
  MsgType_Welcome = 2,
  MsgType_ChangeTeam = 3,
  MsgType_ChangeStatus = 4,
  MsgType_Chat = 5,
  MsgType_GameStart = 6,
  MsgType_Move = 7,
  MsgType_Attack = 8,
  MsgType_CreBuilding = 9,
  MsgType_CreUnit = 10,
  MsgType_MIN = MsgType_None,
  MsgType_MAX = MsgType_CreUnit
};

inline const MsgType (&EnumValuesMsgType())[11] {
  static const MsgType values[] = {
    MsgType_None,
    MsgType_Join,
    MsgType_Welcome,
    MsgType_ChangeTeam,
    MsgType_ChangeStatus,
    MsgType_Chat,
    MsgType_GameStart,
    MsgType_Move,
    MsgType_Attack,
    MsgType_CreBuilding,
    MsgType_CreUnit
  };
  return values;
}

inline const char * const *EnumNamesMsgType() {
  static const char * const names[] = {
    "None",
    "Join",
    "Welcome",
    "ChangeTeam",
    "ChangeStatus",
    "Chat",
    "GameStart",
    "Move",
    "Attack",
    "CreBuilding",
    "CreUnit",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsgType(MsgType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMsgType()[index];
}

enum Info {
  Info_NONE = 0,
  Info_Join = 1,
  Info_Welcome = 2,
  Info_ChangeTeam = 3,
  Info_ChangeStatus = 4,
  Info_Chat = 5,
  Info_Move = 6,
  Info_Attack = 7,
  Info_CreBuilding = 8,
  Info_CreUnit = 9,
  Info_MIN = Info_NONE,
  Info_MAX = Info_CreUnit
};

inline const Info (&EnumValuesInfo())[10] {
  static const Info values[] = {
    Info_NONE,
    Info_Join,
    Info_Welcome,
    Info_ChangeTeam,
    Info_ChangeStatus,
    Info_Chat,
    Info_Move,
    Info_Attack,
    Info_CreBuilding,
    Info_CreUnit
  };
  return values;
}

inline const char * const *EnumNamesInfo() {
  static const char * const names[] = {
    "NONE",
    "Join",
    "Welcome",
    "ChangeTeam",
    "ChangeStatus",
    "Chat",
    "Move",
    "Attack",
    "CreBuilding",
    "CreUnit",
    nullptr
  };
  return names;
}

inline const char *EnumNameInfo(Info e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesInfo()[index];
}

template<typename T> struct InfoTraits {
  static const Info enum_value = Info_NONE;
};

template<> struct InfoTraits<Join> {
  static const Info enum_value = Info_Join;
};

template<> struct InfoTraits<Welcome> {
  static const Info enum_value = Info_Welcome;
};

template<> struct InfoTraits<ChangeTeam> {
  static const Info enum_value = Info_ChangeTeam;
};

template<> struct InfoTraits<ChangeStatus> {
  static const Info enum_value = Info_ChangeStatus;
};

template<> struct InfoTraits<Chat> {
  static const Info enum_value = Info_Chat;
};

template<> struct InfoTraits<Move> {
  static const Info enum_value = Info_Move;
};

template<> struct InfoTraits<Attack> {
  static const Info enum_value = Info_Attack;
};

template<> struct InfoTraits<CreBuilding> {
  static const Info enum_value = Info_CreBuilding;
};

template<> struct InfoTraits<CreUnit> {
  static const Info enum_value = Info_CreUnit;
};

bool VerifyInfo(flatbuffers::Verifier &verifier, const void *obj, Info type);
bool VerifyInfoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Join FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct JoinBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Join::VT_NAME, name);
  }
  explicit JoinBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JoinBuilder &operator=(const JoinBuilder &);
  flatbuffers::Offset<Join> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Join>(end);
    return o;
  }
};

inline flatbuffers::Offset<Join> CreateJoin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  JoinBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Join> CreateJoinDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return MyGame::CreateJoin(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct Welcome FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_TEAM = 6,
    VT_READY = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool team() const {
    return GetField<uint8_t>(VT_TEAM, 0) != 0;
  }
  bool ready() const {
    return GetField<uint8_t>(VT_READY, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint8_t>(verifier, VT_TEAM) &&
           VerifyField<uint8_t>(verifier, VT_READY) &&
           verifier.EndTable();
  }
};

struct WelcomeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Welcome::VT_NAME, name);
  }
  void add_team(bool team) {
    fbb_.AddElement<uint8_t>(Welcome::VT_TEAM, static_cast<uint8_t>(team), 0);
  }
  void add_ready(bool ready) {
    fbb_.AddElement<uint8_t>(Welcome::VT_READY, static_cast<uint8_t>(ready), 0);
  }
  explicit WelcomeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WelcomeBuilder &operator=(const WelcomeBuilder &);
  flatbuffers::Offset<Welcome> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Welcome>(end);
    return o;
  }
};

inline flatbuffers::Offset<Welcome> CreateWelcome(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    bool team = false,
    bool ready = false) {
  WelcomeBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_ready(ready);
  builder_.add_team(team);
  return builder_.Finish();
}

inline flatbuffers::Offset<Welcome> CreateWelcomeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    bool team = false,
    bool ready = false) {
  return MyGame::CreateWelcome(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      team,
      ready);
}

struct ChangeTeam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEAM = 4
  };
  bool team() const {
    return GetField<uint8_t>(VT_TEAM, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TEAM) &&
           verifier.EndTable();
  }
};

struct ChangeTeamBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_team(bool team) {
    fbb_.AddElement<uint8_t>(ChangeTeam::VT_TEAM, static_cast<uint8_t>(team), 0);
  }
  explicit ChangeTeamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChangeTeamBuilder &operator=(const ChangeTeamBuilder &);
  flatbuffers::Offset<ChangeTeam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChangeTeam>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChangeTeam> CreateChangeTeam(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool team = false) {
  ChangeTeamBuilder builder_(_fbb);
  builder_.add_team(team);
  return builder_.Finish();
}

struct ChangeStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_READY = 4
  };
  bool ready() const {
    return GetField<uint8_t>(VT_READY, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_READY) &&
           verifier.EndTable();
  }
};

struct ChangeStatusBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ready(bool ready) {
    fbb_.AddElement<uint8_t>(ChangeStatus::VT_READY, static_cast<uint8_t>(ready), 0);
  }
  explicit ChangeStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChangeStatusBuilder &operator=(const ChangeStatusBuilder &);
  flatbuffers::Offset<ChangeStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChangeStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChangeStatus> CreateChangeStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool ready = false) {
  ChangeStatusBuilder builder_(_fbb);
  builder_.add_ready(ready);
  return builder_.Finish();
}

struct Chat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHAT = 4
  };
  const flatbuffers::String *chat() const {
    return GetPointer<const flatbuffers::String *>(VT_CHAT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAT) &&
           verifier.Verify(chat()) &&
           verifier.EndTable();
  }
};

struct ChatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chat(flatbuffers::Offset<flatbuffers::String> chat) {
    fbb_.AddOffset(Chat::VT_CHAT, chat);
  }
  explicit ChatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChatBuilder &operator=(const ChatBuilder &);
  flatbuffers::Offset<Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Chat>(end);
    return o;
  }
};

inline flatbuffers::Offset<Chat> CreateChat(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> chat = 0) {
  ChatBuilder builder_(_fbb);
  builder_.add_chat(chat);
  return builder_.Finish();
}

inline flatbuffers::Offset<Chat> CreateChatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *chat = nullptr) {
  return MyGame::CreateChat(
      _fbb,
      chat ? _fbb.CreateString(chat) : 0);
}

struct Move FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TAG = 4,
    VT_X = 6,
    VT_Y = 8
  };
  int32_t tag() const {
    return GetField<int32_t>(VT_TAG, 0);
  }
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TAG) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<int32_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct MoveBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tag(int32_t tag) {
    fbb_.AddElement<int32_t>(Move::VT_TAG, tag, 0);
  }
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Move::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(Move::VT_Y, y, 0);
  }
  explicit MoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MoveBuilder &operator=(const MoveBuilder &);
  flatbuffers::Offset<Move> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Move>(end);
    return o;
  }
};

inline flatbuffers::Offset<Move> CreateMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t tag = 0,
    int32_t x = 0,
    int32_t y = 0) {
  MoveBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_tag(tag);
  return builder_.Finish();
}

struct Attack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ATTACKER = 4,
    VT_TARGET = 6
  };
  int32_t attacker() const {
    return GetField<int32_t>(VT_ATTACKER, 0);
  }
  int32_t target() const {
    return GetField<int32_t>(VT_TARGET, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ATTACKER) &&
           VerifyField<int32_t>(verifier, VT_TARGET) &&
           verifier.EndTable();
  }
};

struct AttackBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_attacker(int32_t attacker) {
    fbb_.AddElement<int32_t>(Attack::VT_ATTACKER, attacker, 0);
  }
  void add_target(int32_t target) {
    fbb_.AddElement<int32_t>(Attack::VT_TARGET, target, 0);
  }
  explicit AttackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AttackBuilder &operator=(const AttackBuilder &);
  flatbuffers::Offset<Attack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Attack>(end);
    return o;
  }
};

inline flatbuffers::Offset<Attack> CreateAttack(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t attacker = 0,
    int32_t target = 0) {
  AttackBuilder builder_(_fbb);
  builder_.add_target(target);
  builder_.add_attacker(attacker);
  return builder_.Finish();
}

struct CreBuilding FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_X = 6,
    VT_Y = 8
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<int32_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct CreBuildingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(CreBuilding::VT_TYPE, type, 0);
  }
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(CreBuilding::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(CreBuilding::VT_Y, y, 0);
  }
  explicit CreBuildingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CreBuildingBuilder &operator=(const CreBuildingBuilder &);
  flatbuffers::Offset<CreBuilding> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreBuilding>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreBuilding> CreateCreBuilding(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    int32_t x = 0,
    int32_t y = 0) {
  CreBuildingBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_type(type);
  return builder_.Finish();
}

struct CreUnit FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_X = 6,
    VT_Y = 8
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<int32_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct CreUnitBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(CreUnit::VT_TYPE, type, 0);
  }
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(CreUnit::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(CreUnit::VT_Y, y, 0);
  }
  explicit CreUnitBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CreUnitBuilder &operator=(const CreUnitBuilder &);
  flatbuffers::Offset<CreUnit> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreUnit>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreUnit> CreateCreUnit(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    int32_t x = 0,
    int32_t y = 0) {
  CreUnitBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Msg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  MsgType type() const {
    return static_cast<MsgType>(GetField<int8_t>(VT_TYPE, 0));
  }
  Info data_type() const {
    return static_cast<Info>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const Join *data_as_Join() const {
    return data_type() == Info_Join ? static_cast<const Join *>(data()) : nullptr;
  }
  const Welcome *data_as_Welcome() const {
    return data_type() == Info_Welcome ? static_cast<const Welcome *>(data()) : nullptr;
  }
  const ChangeTeam *data_as_ChangeTeam() const {
    return data_type() == Info_ChangeTeam ? static_cast<const ChangeTeam *>(data()) : nullptr;
  }
  const ChangeStatus *data_as_ChangeStatus() const {
    return data_type() == Info_ChangeStatus ? static_cast<const ChangeStatus *>(data()) : nullptr;
  }
  const Chat *data_as_Chat() const {
    return data_type() == Info_Chat ? static_cast<const Chat *>(data()) : nullptr;
  }
  const Move *data_as_Move() const {
    return data_type() == Info_Move ? static_cast<const Move *>(data()) : nullptr;
  }
  const Attack *data_as_Attack() const {
    return data_type() == Info_Attack ? static_cast<const Attack *>(data()) : nullptr;
  }
  const CreBuilding *data_as_CreBuilding() const {
    return data_type() == Info_CreBuilding ? static_cast<const CreBuilding *>(data()) : nullptr;
  }
  const CreUnit *data_as_CreUnit() const {
    return data_type() == Info_CreUnit ? static_cast<const CreUnit *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyInfo(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Join *Msg::data_as<Join>() const {
  return data_as_Join();
}

template<> inline const Welcome *Msg::data_as<Welcome>() const {
  return data_as_Welcome();
}

template<> inline const ChangeTeam *Msg::data_as<ChangeTeam>() const {
  return data_as_ChangeTeam();
}

template<> inline const ChangeStatus *Msg::data_as<ChangeStatus>() const {
  return data_as_ChangeStatus();
}

template<> inline const Chat *Msg::data_as<Chat>() const {
  return data_as_Chat();
}

template<> inline const Move *Msg::data_as<Move>() const {
  return data_as_Move();
}

template<> inline const Attack *Msg::data_as<Attack>() const {
  return data_as_Attack();
}

template<> inline const CreBuilding *Msg::data_as<CreBuilding>() const {
  return data_as_CreBuilding();
}

template<> inline const CreUnit *Msg::data_as<CreUnit>() const {
  return data_as_CreUnit();
}

struct MsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(MsgType type) {
    fbb_.AddElement<int8_t>(Msg::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_data_type(Info data_type) {
    fbb_.AddElement<uint8_t>(Msg::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Msg::VT_DATA, data);
  }
  explicit MsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MsgBuilder &operator=(const MsgBuilder &);
  flatbuffers::Offset<Msg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Msg>(end);
    return o;
  }
};

inline flatbuffers::Offset<Msg> CreateMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    MsgType type = MsgType_None,
    Info data_type = Info_NONE,
    flatbuffers::Offset<void> data = 0) {
  MsgBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyInfo(flatbuffers::Verifier &verifier, const void *obj, Info type) {
  switch (type) {
    case Info_NONE: {
      return true;
    }
    case Info_Join: {
      auto ptr = reinterpret_cast<const Join *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_Welcome: {
      auto ptr = reinterpret_cast<const Welcome *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_ChangeTeam: {
      auto ptr = reinterpret_cast<const ChangeTeam *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_ChangeStatus: {
      auto ptr = reinterpret_cast<const ChangeStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_Chat: {
      auto ptr = reinterpret_cast<const Chat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_Move: {
      auto ptr = reinterpret_cast<const Move *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_Attack: {
      auto ptr = reinterpret_cast<const Attack *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_CreBuilding: {
      auto ptr = reinterpret_cast<const CreBuilding *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info_CreUnit: {
      auto ptr = reinterpret_cast<const CreUnit *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyInfoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyInfo(
        verifier,  values->Get(i), types->GetEnum<Info>(i))) {
      return false;
    }
  }
  return true;
}

inline const MyGame::Msg *GetMsg(const void *buf) {
  return flatbuffers::GetRoot<MyGame::Msg>(buf);
}

inline const MyGame::Msg *GetSizePrefixedMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MyGame::Msg>(buf);
}

inline bool VerifyMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyGame::Msg>(nullptr);
}

inline bool VerifySizePrefixedMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyGame::Msg>(nullptr);
}

inline void FinishMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyGame::Msg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyGame::Msg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_MYGAME_MYGAME_H_
